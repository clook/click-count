Interesting meeting:
https://fr.slideshare.net/XebiaFrance/devoxx-17-orchestration-de-conteneurs-le-choix-des-armes
https://www.youtube.com/watch?v=UhrIOMuA3_w

Xebia subject:
continuous delivery / deployment

basic process:
- master branch = to be deployed
- validation = manual
- CI/CD tool = concourse
- staging = Docker container for staging
- production = Docker container for production

git master release
=> build Docker image
=> deploy latest image to staging (tag image as staging and docker pull)
 => rollback to previous?
=> deploy staging image to production (tag image as production and docker pull)

traefik for proxy

later:
- integration testing (selenium)
- concourse: add permissions and login (teams)
- concourse: add notification (mail / slack...)
- load balancing (service)
- use docker secrets

auto deployment in docker machine:
- install traefik + dns?
- install concourse
- deploy concourse scenar
- initial build to staging + run staging


URL examples:
staging.click-count.xebia-test
click-count.xebia-test
concourse.xebia-test
...

network:
1) traefik front (web frontal proxy)
2) traefik back (any service that could be served by traefik)
3) concourse
...?

traefik + concourse issues:
- redirect to another port than 8080 => label traefik.port=8080
- force docker network if multiple network tiers: label traefik.docker.network=traefik_webgateway


TODO next
- container to describe the pipeline: download fly / use it with a pipeline files: DONE

TODO later
- set up a Docker registry: DONE
- exec all the setting-up script in a container for portability: DONE (Vagrant is OK for here)


setup container for fly:
- based on alpine with curl
- dns = docker-machine ip => does not work...


concourse worker issue:
runc create: exit status 1: container_linux.go:264: starting container process caused "process_linux.go:339: container init caused \"rootfs_linux.go:57: mounting \\\"/worker-state/3.5.0/assets/bin/init\\\" to rootfs \\\"/worker-state/volumes/live/495f1478-572d-431a-4374-03410491415c/volume/rootfs\\\" at \\\"/worker-state/volumes/live/495f1478-572d-431a-4374-03410491415c/volume/rootfs/tmp/garden-init\\\" caused \\\"open /worker-state/volumes/live/495f1478-572d-431a-4374-03410491415c/volume/rootfs/tmp/garden-init: permission denied\\\"\""

see https://github.com/concourse/concourse/issues/1230
=> "btrfs" driver not needed anymore with Vagrant


docker-machine is buggy (sometimes, the VM is not responsive)
Don't know if it comes from virtualbox => try Vagrant with docker / docker-compose provisionning from Debian 9.1 (kernel > 4.8)
=> DONE


Bug with Concourse worker: DNS should point to dnsmasq to resolve the registry IP: WIP, branch fix/concourse_dns_registry
=> FIXED

Trying http://blog.scottlogic.com/2016/06/20/declarative-ci-cd-with-concourse.html for managing Docker swarm from concourse but:
- the concourse module should be built with the infra set up (OK, we can do it)
- we should provide certs to it as now (with Docker swarm mode), how to provide them with a concourse module...
=> better solutions:
 a) use another CI system than Concourse CI (Drone , Jenkins, Lambda CD?)
 b) Use Clound Foundry for deployment

With Concourse CI without Cloud Foundry, we are only able to deliver, but not package.

=> finally, going with ssh access to Docker daemon host + ansible to process docker deployments

Improvements:
- concourse build cache
- ansible for provisionning infra CI (with dependencies)


What is wrong with Concourse?
- cannot deploy easily with Docker (docker run / docker swarm mode)
- some options are not really customizable and not well documented, eg using git revision on Docker image push, can't get a subset of it (eg first 6 characters)
- Garden linux is heavy and slows down the build between each step
- no convenient way to pass artifacts or variables between jobs / plans (compared to Drone CI where the workspace is shared)
- can't clean build without deleting the whole pipeline (disk consume)

What is good?
- Web UI is sexy
- you can configure accounts and teams with access, really good for QA assessment (but not used)

Other deployment processes: independent of Concourse, tag the images and a "watchdog" update the container with environment due image

